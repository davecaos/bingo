{"version":3,"sources":["colors.js","components/Title.js","components/URLCopierButton.js","components/ImageSaveButton.js","components/BlankTemplateButton.js","components/Buttons.js","components/Card.js","App.js","reportWebVitals.js","index.js"],"names":["greenBingo","Title","p","fontSize","bg","w","URLCopierButton","queryParams","cards","map","text","index","join","pathname","window","location","protocol","host","useClipboard","onCopy","_hasCopied","toast","useToast","onClick","title","position","description","duration","status","isClosable","ml","ImageSaveButton","domtoimage","toJpeg","document","getElementById","quality","then","dataUrl","link","createElement","download","href","click","BlankTemplateButton","setCards","Array","fill","Buttons","Card","onChange","isCenter","backgroundColor","color","h","border","borderColor","borderRadius","textAlign","style","whiteSpace","fontWeight","wordWrap","textJustify","value","name","App","currentURL","url","URL","params","URLSearchParams","search","cardsFromQueryParams","key","parseInt","useState","handleInputChange","event","newCardsArray","target","className","id","columns","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.699b9220.chunk.js","sourcesContent":["export const greenBingo = \"#00917a\"\nexport const bgBingo = \"#f7eada\";","import { Center, Text, Box } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nimport { greenBingo } from \"../colors\";\n\nexport default function Title() {\n  return (\n    <Center>\n      <Box p={2}>\n        <Text fontSize=\"2.8em\">EDITABLE BINGO ✏️</Text>\n        <Box bg={greenBingo} p={1} w=\"750px\" />\n      </Box>\n    </Center>\n  );\n};\n \n\n","import React from \"react\";\nimport { greenBingo } from \"../colors\";\nimport { useClipboard, useToast, Button } from \"@chakra-ui/react\";\n\nexport default function URLCopierButton({ cards }) {\n  const queryParams = cards\n    .map((text, index) => (text ? `${index}=${text}&` : \"\"))\n    .join(\"\");\n  let currentURL = window.location.protocol + \"//\" + window.location.host + \"/\" + window.location.pathname  // returns the absolute URL of a page\n  const url = currentURL\n  const pathname = url + \"?\" + queryParams;\n  const { _hasCopied, onCopy } = useClipboard(pathname);\n  const toast = useToast();\n\n  const handleCopy = () => {\n    toast({\n      title: \"Copied to clipboard!\",\n      position: \"bottom-right\",\n      description: pathname,\n      duration: 2000,\n      status: \"success\",\n      isClosable: true,\n    });\n    onCopy();\n  };\n\n  return (\n    <Button  bg={greenBingo} onClick={handleCopy}ml={3}>\n      Share editable link\n    </Button>\n  );\n}\n","import { Button } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport domtoimage from \"dom-to-image\";\nimport { greenBingo } from \"../colors\";\n\nexport default function ImageSaveButton() {\n  const image = () => {\n    domtoimage\n      .toJpeg(document.getElementById(\"bingo\"), { quality: 0.95 })\n      .then(function (dataUrl) {\n        var link = document.createElement(\"a\");\n        link.download = \"bingo.jpeg\";\n        link.href = dataUrl;\n        link.click();\n      });\n  };\n\n  return (\n    <Button bg={greenBingo} onClick={image} ml={3}>\n      Save as Image\n    </Button>\n  );\n}\n","import React from \"react\";\nimport { greenBingo } from \"../colors\";\nimport { Button } from \"@chakra-ui/react\";\n\nexport default function BlankTemplateButton({ cards, setCards }) {\n\n  const blankBingo = () => {\n    setCards(new Array(25).fill(\"\"))\n  };\n\n  return (\n    <Button  bg={greenBingo} onClick={blankBingo} ml={3}>\n      Blank Template\n    </Button>\n  );\n}\n","import { Box } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport URLCopierButton from \"./URLCopierButton\";\nimport ImageSaveButton from \"./ImageSaveButton\";\nimport BlankTemplateButton from \"./BlankTemplateButton\";\n\nexport default function Buttons({ cards , setCards}){\n    return (\n      <Box p={2}>\n        <URLCopierButton cards={cards} />\n        <ImageSaveButton />\n        <BlankTemplateButton  cards={cards} setCards={setCards}/>\n      </Box>\n    );\n  };\n\n\n","import { Textarea } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { bgBingo, greenBingo } from \"../colors\";\n\nconst Card = ({ text, onChange, index, isCenter }) => {\n  const backgroundColor = isCenter ? greenBingo : bgBingo;\n  const color = isCenter ? \"#f3e9de\" : \"black.200\";\n  return (\n    <Textarea\n      w=\"150px\"\n      h=\"150px\"\n      border=\"2px\"\n      fontSize={14}\n      borderColor=\"black.200\"\n      borderRadius=\"0\"\n      textAlign={[ 'center' ]}\n      style={{\n        whiteSpace: \"normal\",\n        fontWeight: \"bold\",\n        wordWrap: \"break-all\",\n        textJustify: \"inter-word\"\n      }}\n      color={color}\n      value={text}\n      backgroundColor={backgroundColor}\n      name={index}\n      onChange={onChange}\n    />\n  );\n}\n\nexport default Card;\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport { Center } from \"@chakra-ui/react\";\nimport { SimpleGrid, Box } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport Title from \"./components/Title\";\nimport Buttons from \"./components/Buttons\";\nimport Card from \"./components/Card\";\nimport \"./App.css\";\n\nfunction App() {\n  let currentURL = window.location.href; // returns the absolute URL of a page\n  const url = new URL(currentURL);\n  let params = new URLSearchParams(url.search);\n\n  let cardsFromQueryParams = new Array(25).fill(\"\");\n\n  for (let p of params) {\n    let key = p[0];\n    let value = p[1];\n    if ((key) => 0 && key <= 25) cardsFromQueryParams[parseInt(key)] = value;\n  }\n\n  let [cards, setCards] = useState(cardsFromQueryParams);\n\n  const handleInputChange = (event) => {\n    let newCardsArray = [...cards];\n    newCardsArray[event.target.name] = event.target.value;\n    setCards(newCardsArray);\n  };\n\n  return (\n    <ChakraProvider>\n      <div className=\"App\">\n        <div id=\"bingo\" className=\"bingo\">\n          <Box p={1}>\n            <Title />\n            <Center>\n              <SimpleGrid columns={5}>\n                {cards.map((text, index) => {\n                  let isCenter = index === 12;\n                  return (\n                    <Card\n                      text={text}\n                      index={index}\n                      onChange={handleInputChange}\n                      isCenter={isCenter}\n                    />\n                  );\n                })}\n              </SimpleGrid>\n            </Center>\n          </Box>\n        </div>\n        <Buttons cards={cards} setCards={setCards}/>\n      </div>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}