{"version":3,"sources":["URLCopier.js","Card.js","App.js","reportWebVitals.js","index.js"],"names":["URLCopier","queryParams","cards","map","text","index","join","pathname","window","location","protocol","host","useClipboard","onCopy","hasCopied","toast","useToast","colorScheme","onClick","title","position","description","duration","status","isClosable","Card","onChange","isCenter","backgroundColor","color","w","h","border","fontSize","borderColor","borderRadius","justifyContent","style","whiteSpace","wordWrap","textAlign","textJustify","value","name","App","currentURL","href","url","URL","params","URLSearchParams","search","cardsFromQueryParams","Array","fill","p","key","parseInt","useState","setCards","handleInputChange","event","newCardsArray","target","React","setIsOpen","onClose","className","columns","input","document","getElementById","html2canvas","then","canvas","a","createElement","download","toDataURL","click","ml","data-size","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a1109f8a.chunk.js","sourcesContent":["import React from \"react\";\nimport { useClipboard, useToast, Button, Box } from \"@chakra-ui/react\";\n\nexport default function URLCopier({ cards }) {\n  const queryParams = cards\n    .map((text, index) => (text ? `${index}=${text}&` : \"\"))\n    .join(\"\");\n  let currentURL = window.location.protocol + \"//\" + window.location.host + \"/\" + window.location.pathname  // returns the absolute URL of a page\n  const url = currentURL\n  const pathname = url + \"?\" + queryParams;\n  const { hasCopied, onCopy } = useClipboard(pathname);\n  const toast = useToast();\n\n  const handleCopy = () => {\n    toast({\n      title: \"Copied!\",\n      position: \"bottom-right\",\n      description: pathname,\n      duration: 2000,\n      status: \"success\",\n      isClosable: true,\n    });\n    onCopy();\n  };\n\n  return (\n    <Button colorScheme=\"red\" onClick={handleCopy}>\n      Share editable link\n    </Button>\n  );\n}\n","import { Textarea } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport \"./App.css\";\n\nconst Card = ({ text, onChange, index, isCenter }) => {\n  const backgroundColor = isCenter ? \"#00917a\" : \"#f7eada\";\n  const color = isCenter ? \"#f3e9de\" : \"black.200\";\n  return (\n    <Textarea\n      w=\"160px\"\n      h=\"160px\"\n      border=\"2px\"\n      fontSize=\"1em\"\n      borderColor=\"black.200\"\n      borderRadius=\"0\"\n      justifyContent=\"center\"\n      style={{\n        whiteSpace: \"normal\",\n        wordWrap: \"break-all\",\n        textAlign: \"justify\",\n        textJustify: \"inter-word\"\n      }}\n      color={color}\n      value={text}\n      backgroundColor={backgroundColor}\n      name={index}\n      onChange={onChange}\n    />\n  );\n}\n\nexport default Card;\n","import { ChakraProvider } from \"@chakra-ui/react\";\nimport { Center } from \"@chakra-ui/react\";\nimport { SimpleGrid, Text, Button } from \"@chakra-ui/react\";\nimport React, { useState } from \"react\";\nimport URLCopier from \"./URLCopier\";\nimport html2canvas from \"html2canvas\";\nimport {\n  AlertDialog,\n  AlertDialogBody,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogContent,\n  AlertDialogOverlay,\n} from \"@chakra-ui/react\";\nimport Card from \"./Card\";\nimport \"./App.css\";\n\n\nfunction App() {\n  let currentURL = window.location.href; // returns the absolute URL of a page\n  const url = new URL(currentURL);\n  let params = new URLSearchParams(url.search)\n\n  let cardsFromQueryParams = new Array(25).fill(\"\");\n\n  for (let p of params) {\n    let key = p[0]\n    let value = p[1]\n    if (key => 0 && key <=25)\n      (cardsFromQueryParams[parseInt(key)] = value)\n  }\n\n  let [cards, setCards] = useState(cardsFromQueryParams);\n\n  const handleInputChange = (event) => {\n    let newCardsArray = [...cards];\n    newCardsArray[event.target.name] = event.target.value;\n    setCards(newCardsArray)\n  };\n  const [isOpen, setIsOpen] = React.useState(false);\n  const onClose = () => setIsOpen(false);\n\n  const image = () => {\n    const input = document.getElementById(\"root\");\n    html2canvas(input).then((canvas) => {\n      const a = document.createElement(\"a\");\n      a.download = \"bingo.png\";\n      a.href = canvas.toDataURL(\"image/png\");\n      a.click();\n      onClose();\n    });\n  };\n  return (\n    <ChakraProvider>\n      <div className=\"App\">\n        <Text fontSize=\"3em\">BINGO</Text>\n\n        <Center>\n          <SimpleGrid columns={5}>\n            {cards.map((text, index) => {\n              let isCenter = index === 12;\n              return (\n                <Card\n                  text={text}\n                  index={index}\n                  onChange={handleInputChange}\n                  isCenter={isCenter}\n                />\n              );\n            })}\n          </SimpleGrid>\n        </Center>\n      \n        <URLCopier cards={cards}/>\n        <Button colorScheme=\"red\" onClick={image} ml={3}>\n                Save as Image\n              </Button>\n              <Button colorScheme=\"red\" onClick={onClose} ml={3}>\n                Share in Twitter\n              </Button>\n        <a href=\"https://twitter.com/intent/tweet?text=Bingo\" data-size=\"large\">\n          Tweet\n        </a>\n      </div>\n    </ChakraProvider>\n  );\n}\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}